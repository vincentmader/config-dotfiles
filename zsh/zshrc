#!/bin/sh

# echo "loading ZSHRC"

# -----------------------------------------------------------------------------
# 			      $CONF/zsh/zshrc
# -----------------------------------------------------------------------------

# ZSH PLUGINS 
# =============================================================================

    CASE_SENSITIVE="false"  # case-insensitive completion. nice!
    DISABLE_UNTRACKED_FILES_DIRTY="true"  # speeds up git for large repos
    HIST_STAMPS="yyyy-mm-dd"

    plugins=(
        colored-man-pages
        copyfile		# copy file to clipboard: copyfile <file>
        copypath		# copy pwd to clipboard: copypath <path>
        copybuffer              # copy the text currently typed in the command line: Ctrl-o
        # dirhistory              # Alt+Left/Right to move through history, Alt+Up to go to parent
        # emoji-clock		# use to display time (30min accuracy)
        fzf                     # enables fuzzy auto-completion
        git
        web-search
        # npm
        # macos
        # pip
        # python
        sudo                    # press esc twice to sudo repeat cmd
        # taskwarrior           # auto completion for taskwarrior
        # wd                    # warp directory
        zsh-autosuggestions
    )
    source $ZSH/oh-my-zsh.sh

    # suggestions TODO move
    export ZSH_AUTOSUGGEST_STRATEGY=(history completion)
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#888888"  # TODO change color
    # web search TODO move
    ZSH_WEB_SEARCH_ENGINES=(
        reddit "https://www.reddit.com/search/?q="
    )

# SOURCE CONFIG FILES
# =============================================================================

    # environment variables
    source $CONF/zsh/zshenv # needs to be sourced after ohmyzsh for corrections
    # aliases
    source $CONF/zsh/aliasrc
    # prompter
    source $CONF/zsh/prompter

# SHELL COMMAND AUTO-COMPLETION  &  HISTORY
# =============================================================================

    autoload -U compinit
    zstyle ':completion:*' menu select
    zmodload zsh/complist

    # location of zcompdump (-> speeds up auto completion)
    compinit -d "$HOME/.cache/zsh/zcompdump"
    _comp_options+=(globdots)  # include hidden files.

    # thefuck auto-correction
    eval $(thefuck --alias)

# ZSH LINE EDITOR (zle)
# =============================================================================
 
    # vim mode (-e for emacs mode)
    bindkey -v

    export KEYTIMEOUT=1
    
    autoload -U colors && colors

# TMUX
# =============================================================================

    # source config
    tmux source "$CONF/tmux/tmux.conf"
    # check if tmux is running, if not: start it
    [ -z "${TMUX}" ] && tmux new-session -A -s "    misc     "


# RUN EXA ON ZSH START
# =============================================================================

    l  # (see ./aliasrc)

# SHELL SYNTAX HIGHLIGHTING  (needs to be last (TODO does it?))
# =============================================================================

    PATH_TO_PLUGINS="$CONF/zsh/oh-my-zsh/plugins" # ?
    source $PATH_TO_PLUGINS/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh


# VARIOUS / OLD  (TODO clean up)
# =============================================================================
    # java
    export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"
    # export CPPFLAGS="-I/opt/homebrew/opt/openjdk/include"


    # ----------

    setopt sharehistory # ?

    # eval "$(starship init zsh)"
    # export PS3="hello"
    
    # cd $(cat $CONF/zsh/pwd)  # TODO load last saved pwd from file

        # xclip -o | xclip -selection clipboard -i
    
    # add color to man (I have as of yet only changed those with 38;5 at
    # the start, those are from the color set of size 256)
    # export LESS_TERMCAP_mb=$(printf '\e[01;31m') # enter blinking mode – red
    # export LESS_TERMCAP_md=$(printf '\e[38;5;33m') # enter double-bright mode – bold, magenta
    # export LESS_TERMCAP_me=$(printf '\e[0m') # turn off all appearance modes (mb, md, so, us)
    # export LESS_TERMCAP_se=$(printf '\e[0m') # leave standout mode
    # export LESS_TERMCAP_so=$(printf '\e[01;33m') # enter standout mode – yellow
    # export LESS_TERMCAP_ue=$(printf '\e[0m') # leave underline mode
    # export LESS_TERMCAP_us=$(printf '\e[38;5;118m') # enter underline mode – cyan
    
    # Better searching in command mode
    # bindkey -M vicmd '?' history-incremental-search-backward
    # bindkey -M vicmd '/' history-incremental-search-forward
    
    # Beginning search with arrow keys
    # bindkey "^[OA" up-line-or-beginning-search
    # bindkey "^[OB" down-line-or-beginning-search
    # bindkey -M vicmd "k" up-line-or-beginning-search
    # bindkey -M vicmd "j" down-line-or-beginning-search
    
    # Use lf to switch directories and bind it to ctrl-o
    # lfcd () {
    #     tmp="$(mktemp)"
    #     lf -last-dir-path="$tmp" "$@"
    #     if [ -f "$tmp" ]; then
    #         dir="$(cat "$tmp")"
    #         rm -f "$tmp"
    #         [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    #     fi
    # }
    # bindkey -s '^o' 'lfcd\n'
    
    # Use vim keys in tab complete menu:
    # bindkey -M menuselect 'h' vi-backward-char
    # bindkey -M menuselect 'j' vi-down-line-or-history
    # bindkey -M menuselect 'k' vi-up-line-or-history
    # bindkey -M menuselect 'l' vi-forward-char
    # bindkey -v '^?' backward-delete-char
    # # Change cursor shape for different vi modes.
    # function zle-keymap-select {
    #   if [[ ${KEYMAP} == vicmd ]] ||
    #      [[ $1 = 'block' ]]; then
    #     echo -ne '\e[1 q'
    #   elif [[ ${KEYMAP} == main ]] ||
    #        [[ ${KEYMAP} == viins ]] ||
    #        [[ ${KEYMAP} = '' ]] ||
    #        [[ $1 = 'beam' ]]; then
    #     echo -ne '\e[5 q'
    #   fi
    # }
    # zle -N zle-keymap-select
    # zle-line-init() {
    #     # initiate "vi insert" as keymap
    #     # (can be removed if `bindkey -V` has been set elsewhere)
    #     zle -K viins
    #     echo -ne "\e[5 q"
    # }
    # zle -N zle-line-init
    # Use beam shape cursor on startup.
    # echo -ne '\e[5 q'
    # Use beam shape cursor for each new prompt.
    # preexec() { echo -ne '\e[5 q' ;}
    
    # Edit line in vim with ctrl-e:
    # autoload edit-command-line; zle -N edit-command-line
    # bindkey '^e' edit-command-line
     
    # ZSH_THEME='powerlevel9k/powerlevel9k'
    # POWERLEVEL9K_MODE="nerdfont-complete"
    # POWERLEVEL9K_LEFT_PROMPT_ELEMENTS = ('--\n--')
    # ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=13'

# fzf (TODO sort-out unneeded stuff)
# -----------------------------------------------------------------------------
    
      # [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
    # setup default command
    # --files: List files that would be searched but do not search
    # --no-ignore: Do not respect .gitignore, etc...
    # --hidden: Search hidden files and folders
    # --follow: Follow symlinks
    # --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
    # include hidden files
    # export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*"'
    # Use fd and fzf to get the args to a command.
    # Works only with zsh
    # Examples:
    # f mv # To move files. You can write the destination after selecting the files.
    # f 'echo Selected:'
    # f 'echo Selected music:' --extention mp3
    # fm rm # To rm files in current directory
    # f() {
    #     sels=( "${(@f)$(fd "${fd_default[@]}" "${@:2}"| fzf)}" )
    #     test -n "$sels" && print -z -- "$1 ${sels[@]:q:q}"
    # }
    
    # Deps
    #alias fz="fzf-noempty --bind 'tab:toggle,shift-tab:toggle+beginning-of-line+kill-line,ctrl-j:toggle+beginning-of-line+kill-line,ctrl-t:top' --color=light -1 -m"
    #fzf-noempty () {
    #	local in="$(</dev/stdin)"
    #	test -z "$in" && (
    #		exit 130
    #	) || {
    #		ec "$in" | fzf "$@"
    #	}
    #}
    #ec () {
    #	if [[ -n $ZSH_VERSION ]]
    #	then
    #		print -r -- "$@"
    #	else
    #		echo -E -- "$@"
    #	fi
    #}
    # fe [FUZZY PATTERN] - Open the selected file with the default editor
    #   - Bypass fuzzy finder if there's only one match (--select-1)
    #   - Exit if there's no match (--exit-0)
    # fe() {
    #   local files
    #   IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
    #   [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
    # }
    # vf - fuzzy open with vim from anywhere
    # ex: vf word1 word2 ... (even part of a file name)
    # zsh autoload function
    #vf() {
    #  local files
    #
    #  files=(${(f)"$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1 -m)"})
    
    #  if [[ -n $files ]]
    #  then
    #     vim -- $files
    #     print -l $files[1]
    #  fi
    #}
    # fd - cd to selected directory
    #fd() {
    #  local dir
    #  dir=$(find ${1:-.} -path '*/\.*' -prune \
    #                  -o -type d -print 2> /dev/null | fzf +m) &&
    #  cd "$dir"
    #}
    # fda - including hidden directories
    #fda() {
    #  local dir
    #  dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
    #}
    
