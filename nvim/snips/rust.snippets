
# ╔═══════════════════════════════════════════════════════════════════════════╗
# ║                                  Comments                                 ║
# ╚═══════════════════════════════════════════════════════════════════════════╝

snippet comment_separator_1 "# ======..."
// ════════════════════════════════════════════════════════════════════════════
endsnippet
snippet comment_separator_2 "# ------..."
// ────────────────────────────────────────────────────────────────────────────
endsnippet
snippet comment_box_1 ""
`!p snip.rv = '// ╔' + '═' * (len(t[1]) + 2) + '╗'`
// ║ $1 ║
`!p snip.rv = '// ╚' + '═' * (len(t[1]) + 2) + '╝'`
$0
endsnippet
snippet comment_box_2 ""
`!p snip.rv = '// ╭' + '─' * (len(t[1]) + 2) + '╮'`
// │ $1 │
`!p snip.rv = '// ╰' + '─' * (len(t[1]) + 2) + '╯'`
$0
endsnippet
snippet comment_box_3 ""
`!p snip.rv = '// ┌' + '─' * (len(t[1]) + 2) + '┐'`
// │ $1 │
`!p snip.rv = '// └' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

# ╔═══════════════════════════════════════════════════════════════════════════╗
# ║                                   Macros                                  ║
# ╚═══════════════════════════════════════════════════════════════════════════╝

snippet allow ""
#![allow($1)]
endsnippet

snippet derive ""
#[derive($1)]
endsnippet


# ╔═══════════════════════════════════════════════════════════════════════════╗
# ║                              Type Definitions                             ║
# ╚═══════════════════════════════════════════════════════════════════════════╝
#				                        Define a new structure.
#						         -> obsolete due to LSP
# ─────────────────────────────────────────────────────────────────────────────
# snippet struct ""
# struct $1 {
#     $2
# }
# endsnippet
#				                     Define a new `impl` block.
#						         -> obsolete due to LSP
# ─────────────────────────────────────────────────────────────────────────────
# snippet impl ""
# impl $1 {
#     $2
# }
# endsnippet
#				                      Define a new enumeration.
#						         -> obsolete due to LSP
# ─────────────────────────────────────────────────────────────────────────────
# snippet enum "
# enum $1 {
#     $2
# }
# endsnippet
# ╔═══════════════════════════════════════════════════════════════════════════╗
# ║                            Function Definitions                           ║
# ╚═══════════════════════════════════════════════════════════════════════════╝
#				                  Define a new function/method.
#						         -> obsolete due to LSP
# ─────────────────────────────────────────────────────────────────────────────
# snippet fn ""
# fn $1($2) -> ${3:()} {
#     $4
# }
# endsnippet
# ╔═══════════════════════════════════════════════════════════════════════════╗
# ║                                  Iterators                                ║
# ╚═══════════════════════════════════════════════════════════════════════════╝

snippet iter_map_collect "" 
let _: Vec<()> = $1.iter().map(|x| x).collect();
endsnippet
snippet iter_enumerate_map_collect "" 
let _: Vec<()> = $1.iter().enumerate().map(|idx, x| x).collect();
endsnippet

# ╔═══════════════════════════════════════════════════════════════════════════╗
# ║                           Trait Implementations                           ║
# ╚═══════════════════════════════════════════════════════════════════════════╝

snippet impl_From_for ""
impl From<$1> for $2 {
    fn from($3: $1) -> Self {
	$4
    }
}
endsnippet
snippet impl_Iterator_for ""
impl Iterator for $1 {
    type Item = $2;
    fn next(&mut self)-> Option<$2> { 
	$3
    }
}
endsnippet
snippet impl_Add_for ""
impl std::ops::Add for $1 {
    type Output = $2;
    fn add(self, rhs: $3) -> Self::Output {
        $4
    }
}
endsnippet
snippet impl_Sub_for ""
impl std::ops::Sub for $1 {
    type Output = $2;
    fn sub(self, rhs: $3) -> Self::Output {
        $4
    }
}
endsnippet
snippet impl_Mul_for ""
impl std::ops::Mul for $1 {
    type Output = $2;
    fn mul(self, rhs: $3) -> Self::Output {
        $4
    }
}
endsnippet
snippet impl_Div_for ""
impl std::ops::Div for $1 {
    type Output = $2;
    fn div(self, rhs: $3) -> Self::Output {
        $4
    }
}
endsnippet
snippet impl_Sum_for ""
impl std::iter::Sum for $1 {
    fn sum<I>(iter: I) -> Self
    where
        I: Iterator<Item = $1>,
    {
        iter.fold(
	    $2
	    |a, b| {
		$3
	    }
	)
    }
}
endsnippet

# ╔═══════════════════════════════════════════════════════════════════════════╗
# ║                          Yew Components/Functions                         ║
# ╚═══════════════════════════════════════════════════════════════════════════╝

snippet yew_component ""
pub struct $1 {}
impl yew::Component for $1 {
    type Message = $1Msg;
    type Properties = Props;

    fn create(_ctx: &Context<Self>) -> Self {
        Self {}
    }

    fn view(&self, _ctx: &Context<Self>) -> Html {
        html! {
            <>
            </>
        }
    }

    fn update(&mut self, _ctx: &Context<Self>, _msg: Self::Message) -> bool {
        true
    }
}

#[derive(PartialEq, yew::Properties, std::default::Default)]
pub struct Props {}

pub enum $1Msg {}
endsnippet

snippet yew_function_component ""
#[derive(Properties, PartialEq)]
pub struct Props {}

#[function_component($1)]
pub fn fn_name(props: &Props)-> Html {
    html! {
	<>
	    
	</>
    }
}
endsnippet

snippet yew_props ""
#[derive(Properties, PartialEq)]
pub struct Props {}
endsnippet
snippet yew_stylist_style ""
let style = stylist::style!(
    r#"
	$1
    "#
).unwrap();
endsnippet

snippet use_yew_prelude_all ""
use yew::prelude::*;
endsnippet
snippet use_std_collections_hashmap ""
use std::collections::HashMap;
endsnippet
snippet use_std_sync_arc ""
use std::sync::Arc;
endsnippet
snippet use_std_sync_mutex ""
use std::sync::Mutex;
endsnippet


# snippet function ""
# fn ${1:name}() -> ${2:type} {
#     $3
# }
# endsnippet

# snippet pubstruct ""
# pub struct ${1:name} {

# }
# impl ${1:name} {
#     pub fn new() -> $1 {
# 	$1 {}
#     }
#     pub fn init(&self) {

#     }
# }
# endsnippet

# snippet console_log ""
# mxyz_utils::dom::console::log(&format!("{}", $1));
# endsnippet

